<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AHP Web App</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="/static/fonts/TimesNewRoman.js"></script>
    <style>
        table {
            border-collapse: collapse;
            width: 100%;
            margin-bottom: 1rem;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #e5e7eb;
            font-weight: bold;
        }
        .error {
            color: red;
            font-weight: bold;
        }
        .accordion-header {
            cursor: pointer;
            padding: 10px;
            background-color: #f3f4f6;
            border-radius: 4px;
            margin-bottom: 4px;
        }
        .accordion-content {
            display: none;
            padding: 10px;
        }
        .accordion-content.active {
            display: block;
        }
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            background-color: #e5e7eb;
            border-radius: 4px 4px 0 0;
            margin-right: 4px;
        }
        .tab.active {
            background-color: #ffffff;
            border-bottom: 2px solid #3b82f6;
        }
        .tab-content {
            display: none;
            padding: 20px;
            background-color: #ffffff;
            border-radius: 0 0 4px 4px;
            border: 1px solid #e5e7eb;
        }
        .tab-content.active {
            display: block;
        }
        .border-red-500 {
            border-color: #ef4444 !important;
        }
    </style>
</head>
<body class="bg-gray-50 p-6">
    <div class="max-w-7xl mx-auto bg-white p-6 rounded-lg shadow-lg">
        <h1 class="text-3xl font-bold text-gray-800 mb-6">Ứng dụng tính AHP</h1>

        <!-- Tabs -->
        <div class="flex mb-4">
            <div class="tab active" data-tab="default">Kết quả mặc định</div>
            <div class="tab" data-tab="input">Nhập dữ liệu</div>
            <div class="tab" data-tab="results">Kết quả AHP</div>
        </div>

        <!-- Default Tab -->
        <div id="default" class="tab-content active">
            <h2 class="text-2xl font-semibold text-gray-700 mb-4">Kết quả mặc định</h2>
            <div class="accordion">
                <div class="accordion-header">Ma trận và trọng số tiêu chí</div>
                <div class="accordion-content">
                    <h3 class="text-lg font-semibold mb-2">Ma trận so sánh tiêu chí</h3>
                    <table>
                        <tr>
                            <th></th>
                            {% for crit in criteria_names %}
                            <th>{{ crit }}</th>
                            {% endfor %}
                        </tr>
                        {% for i in range(criteria_names|length) %}
                        <tr>
                            <td>{{ criteria_names[i] }}</td>
                            {% for j in range(criteria_names|length) %}
                            <td>{{ default_criteria_matrix[i][j]|round(4) }}</td>
                            {% endfor %}
                        </tr>
                        {% endfor %}
                    </table>

                    <h3 class="text-lg font-semibold mb-2 mt-4">Ma trận chuẩn hóa tiêu chí</h3>
                    <table>
                        <tr>
                            <th></th>
                            {% for crit in criteria_names %}
                            <th>{{ crit }}</th>
                            {% endfor %}
                        </tr>
                        {% for i in range(criteria_names|length) %}
                        <tr>
                            <td>{{ criteria_names[i] }}</td>
                            {% for j in range(criteria_names|length) %}
                            <td>{{ default_norm_crit_matrix[i][j]|round(4) }}</td>
                            {% endfor %}
                        </tr>
                        {% endfor %}
                    </table>

                    <h3 class="text-lg font-semibold mb-2 mt-4">Trọng số tiêu chí (CR: {{ default_criteria_cr|round(4) }})</h3>
                    <canvas id="defaultCritChart" class="mb-4"></canvas>
                    <table>
                        <tr>
                            {% for crit in criteria_names %}
                            <th>{{ crit }}</th>
                            {% endfor %}
                        </tr>
                        <tr>
                            {% for weight in default_criteria_weights %}
                            <td>{{ weight|round(4) }}</td>
                            {% endfor %}
                        </tr>
                    </table>
                </div>

                {% for crit in criteria_names %}
                <div class="accordion-header">Ma trận và trọng số phương án - {{ crit }}</div>
                <div class="accordion-content">
                    <h3 class="text-lg font-semibold mb-2">Ma trận so sánh phương án - {{ crit }}</h3>
                    <table>
                        <tr>
                            <th></th>
                            {% for alt in alternatives %}
                            <th>{{ alt }}</th>
                            {% endfor %}
                        </tr>
                        {% for i in range(alternatives|length) %}
                        <tr>
                            <td>{{ alternatives[i] }}</td>
                            {% for j in range(alternatives|length) %}
                            <td>{{ default_alt_matrices[crit][i][j]|round(4) }}</td>
                            {% endfor %}
                        </tr>
                        {% endfor %}
                    </table>

                    <h3 class="text-lg font-semibold mb-2 mt-4">Ma trận chuẩn hóa phương án - {{ crit }}</h3>
                    <table>
                        <tr>
                            <th></th>
                            {% for alt in alternatives %}
                            <th>{{ alt }}</th>
                            {% endfor %}
                        </tr>
                        {% for i in range(alternatives|length) %}
                        <tr>
                            <td>{{ alternatives[i] }}</td>
                            {% for j in range(alternatives|length) %}
                            <td>{{ default_norm_alt_matrices[crit][i][j]|round(4) }}</td>
                            {% endfor %}
                        </tr>
                        {% endfor %}
                    </table>

                    <h3 class="text-lg font-semibold mb-2 mt-4">Trọng số phương án - {{ crit }} (CR: {{ default_alt_cr[crit]|round(4) }})</h3>
                    <table>
                        <tr>
                            {% for alt in alternatives %}
                            <th>{{ alt }}</th>
                            {% endfor %}
                        </tr>
                        <tr>
                            {% for weight in default_alt_weights[crit] %}
                            <td>{{ weight|round(4) }}</td>
                            {% endfor %}
                        </tr>
                    </table>
                </div>
                {% endfor %}

                <div class="accordion-header">Điểm tổng hợp và xếp hạng phương án</div>
                <div class="accordion-content">
                    <canvas id="defaultAltChart" class="mb-4"></canvas>
                    <table>
                        <tr>
                            <th>Phương án</th>
                            <th>Điểm</th>
                            <th>Xếp hạng</th>
                        </tr>
                        {% for item in default_rankings %}
                        <tr>
                            <td>{{ item.name }}</td>
                            <td>{{ item.score|round(4) }}</td>
                            <td>{{ loop.index }}</td>
                        </tr>
                        {% endfor %}
                    </table>
                </div>
            </div>
            <button id="export-default" class="mt-4 bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700">Xuất báo cáo mặc định</button>
        </div>

        <!-- Input Tab -->
        <div id="input" class="tab-content">
            <h2 class="text-2xl font-semibold text-gray-700 mb-4">Nhập dữ liệu so sánh cặp</h2>
            <div class="accordion">
                <div class="accordion-header">Ma trận tiêu chí</div>
                <div class="accordion-content">
                    <table>
                        <thead>
                            <tr>
                                <th></th>
                                {% for criterion in criteria_names %}
                                <th>{{ criterion }}</th>
                                {% endfor %}
                            </tr>
                        </thead>
                        <tbody>
                            {% for i in range(criteria_names|length) %}
                            <tr>
                                <th>{{ criteria_names[i] }}</th>
                                {% for j in range(criteria_names|length) %}
                                <td>
                                    {% if i == j %}
                                    1
                                    {% elif i < j %}
                                    <input type="number" step="any" min="0.111" max="9"
                                           class="w-16 border p-1 rounded"
                                           data-row="{{ i }}" data-col="{{ j }}"
                                           oninput="updateReciprocal(this)">
                                    {% else %}
                                    <span id="reciprocal-{{ i }}-{{ j }}"></span>
                                    {% endif %}
                                </td>
                                {% endfor %}
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>

                {% for crit in criteria_names %}
                <div class="accordion-header">Ma trận phương án - {{ crit }}</div>
                <div class="accordion-content">
                    <table>
                        <tr>
                            <th></th>
                            {% for alt in alternatives %}
                            <th>{{ alt }}</th>
                            {% endfor %}
                        </tr>
                        {% for i in range(alternatives|length) %}
                        <tr>
                            <td>{{ alternatives[i] }}</td>
                            {% for j in range(alternatives|length) %}
                            <td>
                                {% if i == j %}
                                1
                                {% elif i < j %}
                                <input type="number" step="any" class="w-16 border p-1 rounded" data-crit="{{ crit }}" data-i="{{ i }}" data-j="{{ j }}">
                                {% else %}
                                <span class="reciprocal" data-crit="{{ crit }}" data-i="{{ j }}" data-j="{{ i }}"></span>
                                {% endif %}
                            </td>
                            {% endfor %}
                        </tr>
                        {% endfor %}
                    </table>
                </div>
                {% endfor %}
            </div>
            <button id="calculate" class="mt-4 bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700">Tính AHP</button>
            <p id="error" class="error hidden mt-2"></p>
        </div>

        <!-- Results Tab -->
        <div id="results" class="tab-content hidden">
            <h2 class="text-2xl font-semibold text-gray-700 mb-4">Kết quả AHP</h2>
            <div class="accordion">
                <div class="accordion-header">Ma trận và trọng số tiêu chí</div>
                <div class="accordion-content">
                    <h3 class="text-lg font-semibold mb-2">Ma trận chuẩn hóa tiêu chí</h3>
                    <table id="norm-crit-table"></table>
                    <h3 class="text-lg font-semibold mb-2 mt-4">Trọng số tiêu chí</h3>
                    <canvas id="critChart" class="mb-4"></canvas>
                    <table id="crit-weights-table"></table>
                    <p id="crit-cr" class="mt-2"></p>
                </div>

                {% for crit in criteria_names %}
                <div class="accordion-header">Ma trận và trọng số phương án - {{ crit }}</div>
                <div class="accordion-content">
                    <h3 class="text-lg font-semibold mb-2">Ma trận chuẩn hóa phương án - {{ crit }}</h3>
                    <table id="norm-alt-table-{{ crit }}"></table>
                    <h3 class="text-lg font-semibold mb-2 mt-4">Trọng số phương án - {{ crit }}</h3>
                    <table id="alt-weights-table-{{ crit }}"></table>
                    <p id="alt-cr-{{ crit }}" class="mt-2"></p>
                </div>
                {% endfor %}

                <div class="accordion-header">Điểm tổng hợp và xếp hạng phương án</div>
                <div class="accordion-content">
                    <canvas id="altChart" class="mb-4"></canvas>
                    <table id="ranking"></table>
                </div>
            </div>
            <button id="export" class="mt-4 bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700">Xuất báo cáo</button>
        </div>
    </div>

    <script>
        const criteriaNames = {{ criteria_names|tojson }};
        const alternatives = {{ alternatives|tojson }};
        const saatyScale = [1, 3, 5, 7, 9, 1/3, 1/5, 1/7, 1/9];
        const defaultData = {
            criteria_weights: {{ default_criteria_weights|tojson }},
            alt_weights: {{ default_alt_weights|tojson }},
            criteria_cr: {{ default_criteria_cr|tojson }},
            alt_cr: {{ default_alt_cr|tojson }},
            final_scores: {{ default_final_scores|tojson }},
            rankings: {{ default_rankings|tojson }},
            crit_chart: {{ default_crit_chart|tojson }},
            alt_chart: {{ default_alt_chart|tojson }}
        };
        let calculatedData = null;

        // Default visualizations
        new Chart(document.getElementById('defaultCritChart'), {
            type: 'bar',
            data: {
                labels: criteriaNames,
                datasets: [{ label: 'Trọng số', data: defaultData.criteria_weights, backgroundColor: 'rgba(54, 162, 235, 0.6)' }]
            },
            options: { scales: { y: { beginAtZero: true } } }
        });

        new Chart(document.getElementById('defaultAltChart'), {
            type: 'bar',
            data: {
                labels: alternatives,
                datasets: [{ label: 'Điểm', data: defaultData.final_scores, backgroundColor: 'rgba(75, 192, 192, 0.6)' }]
            },
            options: { scales: { y: { beginAtZero: true } } }
        });

        // Tab switching
        document.querySelectorAll('.tab').forEach(tab => {
            tab.addEventListener('click', () => {
                document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
                tab.classList.add('active');
                document.getElementById(tab.dataset.tab).classList.add('active');
            });
        });

        // Accordion functionality
        document.querySelectorAll('.accordion-header').forEach(header => {
            header.addEventListener('click', () => {
                const content = header.nextElementSibling;
                content.classList.toggle('active');
            });
        });

        // Export default report
        document.getElementById('export-default').addEventListener('click', () => {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF({ orientation: 'portrait', unit: 'mm', format: 'a4' });
            doc.setFont("TimesNewRoman", "normal");
            doc.setFontSize(12);
            doc.setTextColor(0, 0, 0);
            doc.setLanguage("vi");

            const margin = 20;
            const maxWidth = 170;
            let y = 20;

            const wrap = (text) => doc.splitTextToSize(text, maxWidth);
            const write = (text) => {
                const lines = wrap(text);
                doc.text(lines, margin, y, { maxWidth, align: "justify" });
                y += lines.length * 7;
            };

            write('Báo cáo kết quả AHP (Mặc định)');
            write('Trọng số tiêu chí:');
            criteriaNames.forEach((crit, i) => {
                write(`${crit}: ${defaultData.criteria_weights[i].toFixed(4)}`);
            });
            write(`Chỉ số nhất quán CR: ${defaultData.criteria_cr.toFixed(4)}`);

            write('Trọng số phương án:');
            criteriaNames.forEach(crit => {
                write(`${crit}:`);
                alternatives.forEach((alt, i) => {
                    write(`${alt}: ${defaultData.alt_weights[crit][i].toFixed(4)}`);
                });
                write(`CR: ${defaultData.alt_cr[crit].toFixed(4)}`);
            });

            write('Xếp hạng phương án:');
            defaultData.rankings.forEach((item, i) => {
                write(`${i + 1}. ${item.name}: ${item.score.toFixed(4)}`);
            });

            if (defaultData.crit_chart) {
                doc.addImage(`data:image/png;base64,${defaultData.crit_chart}`, 'PNG', margin, y, 170, 85);
                y += 90;
            }
            if (defaultData.alt_chart) {
                doc.addImage(`data:image/png;base64,${defaultData.alt_chart}`, 'PNG', margin, y, 170, 85);
            }

            doc.save('ahp_default_report.pdf');
        });

        // Hàm kiểm tra giá trị hợp lệ theo thang Saaty
        function isValidSaatyValue(value) {
            return saatyScale.includes(parseFloat(value)) || value === '';
        }

        // Hàm cập nhật giá trị nghịch đảo
        function updateReciprocal(input) {
            const i = parseInt(input.dataset.row || input.dataset.i);
            const j = parseInt(input.dataset.col || input.dataset.j);
            const crit = input.dataset.crit || null;
            const value = parseFloat(input.value);
            const reciprocalSpan = crit
                ? document.querySelector(`.reciprocal[data-crit="${crit}"][data-i="${j}"][data-j="${i}"]`)
                : document.getElementById(`reciprocal-${j}-${i}`);
            if (value && !isNaN(value) && value !== 0) {
                const reciprocalValue = (1 / value).toFixed(4);
                reciprocalSpan.textContent = reciprocalValue;
            } else {
                reciprocalSpan.textContent = '';
            }
        }

        // Hàm kiểm tra tất cả giá trị đầu vào
        function validateAllInputs() {
            let allValid = true;
            let errorMessage = '';
            document.querySelectorAll('#input input').forEach(input => {
                const value = input.value;
                if (!isValidSaatyValue(value)) {
                    const i = parseInt(input.dataset.i || input.dataset.row) + 1;
                    const j = parseInt(input.dataset.j || input.dataset.col) + 1;
                    const crit = input.dataset.crit || 'Tiêu chí';
                    errorMessage = `Giá trị ${value} tại [${i},${j}] của ${crit} không thuộc thang Saaty (${saatyScale.join(', ')}).`;
                    allValid = false;
                }
            });
            const errorElement = document.getElementById('error');
            if (!allValid) {
                errorElement.textContent = errorMessage;
                errorElement.classList.remove('hidden');
                document.getElementById('calculate').disabled = true;
            } else {
                errorElement.classList.add('hidden');
                document.getElementById('calculate').disabled = false;
            }
            return allValid;
        }

        // Hàm kiểm tra xem tất cả các ô đã được điền
        function areAllInputsFilled() {
            let allFilled = true;
            document.querySelectorAll('#input input').forEach(input => {
                if (input.value === '') {
                    allFilled = false;
                }
            });
            return allFilled;
        }

        // Hàm tính toán AHP
        async function calculateAHP() {
            if (!validateAllInputs() || !areAllInputsFilled()) return;

            // Collect criteria matrix
            const critMatrix = Array(criteriaNames.length).fill().map(() => Array(criteriaNames.length).fill(1));
            document.querySelectorAll('#input input[data-row][data-col]').forEach(input => {
                const i = parseInt(input.dataset.row);
                const j = parseInt(input.dataset.col);
                const value = parseFloat(input.value);
                critMatrix[i][j] = value;
                critMatrix[j][i] = 1 / value;
            });

            // Collect alternative matrices
            const altMatrices = {};
            criteriaNames.forEach(crit => {
                const matrix = Array(alternatives.length).fill().map(() => Array(alternatives.length).fill(1));
                document.querySelectorAll(`#input input[data-crit="${crit}"]`).forEach(input => {
                    const i = parseInt(input.dataset.i);
                    const j = parseInt(input.dataset.j);
                    const value = parseFloat(input.value);
                    matrix[i][j] = value;
                    matrix[j][i] = 1 / value;
                });
                altMatrices[crit] = matrix;
            });

            // Send to server
            const response = await fetch('/calculate', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ criteria_matrix: critMatrix, alt_matrices: altMatrices })
            });

            if (response.ok) {
                calculatedData = await response.json();
                document.getElementById('results').classList.add('active');
                document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                document.querySelector('.tab[data-tab="results"]').classList.add('active');
                document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
                document.getElementById('results').classList.add('active');

                // Normalized criteria matrix
                let table = document.getElementById('norm-crit-table');
                table.innerHTML = '';
                let row = table.insertRow();
                row.insertCell().textContent = '';
                criteriaNames.forEach(crit => row.insertCell().textContent = crit);
                calculatedData.norm_crit_matrix.forEach((rowData, i) => {
                    let row = table.insertRow();
                    row.insertCell().textContent = criteriaNames[i];
                    rowData.forEach(val => row.insertCell().textContent = val.toFixed(4));
                });

                // Criteria weights chart
                new Chart(document.getElementById('critChart'), {
                    type: 'bar',
                    data: {
                        labels: criteriaNames,
                        datasets: [{ label: 'Trọng số', data: calculatedData.criteria_weights, backgroundColor: 'rgba(54, 162, 235, 0.6)' }]
                    },
                    options: { scales: { y: { beginAtZero: true } } }
                });

                // Criteria weights table
                table = document.getElementById('crit-weights-table');
                table.innerHTML = '';
                row = table.insertRow();
                criteriaNames.forEach(crit => row.insertCell().textContent = crit);
                row = table.insertRow();
                calculatedData.criteria_weights.forEach(weight => row.insertCell().textContent = weight.toFixed(4));
                document.getElementById('crit-cr').textContent = `CR: ${calculatedData.criteria_cr.toFixed(4)}`;

                // Normalized alternative matrices and weights
                criteriaNames.forEach(crit => {
                    let table = document.getElementById(`norm-alt-table-${crit}`);
                    table.innerHTML = '';
                    let row = table.insertRow();
                    row.insertCell().textContent = '';
                    alternatives.forEach(alt => row.insertCell().textContent = alt);
                    calculatedData.norm_alt_matrices[crit].forEach((rowData, i) => {
                        let row = table.insertRow();
                        row.insertCell().textContent = alternatives[i];
                        rowData.forEach(val => row.insertCell().textContent = val.toFixed(4));
                    });

                    table = document.getElementById(`alt-weights-table-${crit}`);
                    table.innerHTML = '';
                    row = table.insertRow();
                    alternatives.forEach(alt => row.insertCell().textContent = alt);
                    row = table.insertRow();
                    calculatedData.alt_weights[crit].forEach(weight => row.insertCell().textContent = weight.toFixed(4));
                    document.getElementById(`alt-cr-${crit}`).textContent = `CR: ${calculatedData.alt_cr[crit].toFixed(4)}`;
                });

                // Alternatives scores chart
                new Chart(document.getElementById('altChart'), {
                    type: 'bar',
                    data: {
                        labels: alternatives,
                        datasets: [{ label: 'Điểm', data: calculatedData.final_scores, backgroundColor: 'rgba(75, 192, 192, 0.6)' }]
                    },
                    options: { scales: { y: { beginAtZero: true } } }
                });

                // Rankings table
                table = document.getElementById('ranking');
                table.innerHTML = '<tr><th>Phương án</th><th>Điểm</th><th>Xếp hạng</th></tr>';
                calculatedData.rankings.forEach((item, i) => {
                    let row = table.insertRow();
                    row.insertCell().textContent = item.name;
                    row.insertCell().textContent = item.score.toFixed(4);
                    row.insertCell().textContent = i + 1;
                });

                // Export report
                document.getElementById('export').onclick = () => {
                    const { jsPDF } = window.jspdf;
                    const doc = new jsPDF({ orientation: 'portrait', unit: 'mm', format: 'a4' });
                    doc.setFont("TimesNewRoman", "normal");
                    doc.setFontSize(12);
                    doc.setTextColor(0, 0, 0);
                    doc.setLanguage("vi");

                    const margin = 20;
                    const maxWidth = 170;
                    let y = 20;

                    const wrap = (text) => doc.splitTextToSize(text, maxWidth);
                    const write = (text) => {
                        const lines = wrap(text);
                        doc.text(lines, margin, y, { maxWidth, align: "justify" });
                        y += lines.length * 7;
                    };

                    write('Báo cáo kết quả AHP');
                    write('Trọng số tiêu chí:');
                    criteriaNames.forEach((crit, i) => {
                        write(`${crit}: ${calculatedData.criteria_weights[i].toFixed(4)}`);
                    });
                    write(`Chỉ số nhất quán CR: ${calculatedData.criteria_cr.toFixed(4)}`);

                    write('Trọng số phương án:');
                    criteriaNames.forEach(crit => {
                        write(`${crit}:`);
                        alternatives.forEach((alt, i) => {
                            write(`${alt}: ${calculatedData.alt_weights[crit][i].toFixed(4)}`);
                        });
                        write(`CR: ${calculatedData.alt_cr[crit].toFixed(4)}`);
                    });

                    write('Xếp hạng phương án:');
                    calculatedData.rankings.forEach((item, i) => {
                        write(`${i + 1}. ${item.name}: ${item.score.toFixed(4)}`);
                    });

                    if (calculatedData.crit_chart) {
                        doc.addImage(`data:image/png;base64,${calculatedData.crit_chart}`, 'PNG', margin, y, 170, 85);
                        y += 90;
                    }
                    if (calculatedData.alt_chart) {
                        doc.addImage(`data:image/png;base64,${calculatedData.alt_chart}`, 'PNG', margin, y, 170, 85);
                    }

                    doc.save('ahp_report.pdf');
                };
            } else {
                const error = await response.json();
                document.getElementById('error').textContent = error.error;
                document.getElementById('error').classList.remove('hidden');
            }
        }

        // Thêm sự kiện input để kiểm tra giá trị, tự động cập nhật nghịch đảo và tính toán
        document.querySelectorAll('#input input').forEach(input => {
            input.addEventListener('input', () => {
                const value = input.value;
                if (value !== '' && !isValidSaatyValue(value)) {
                    input.classList.add('border-red-500');
                    const i = parseInt(input.dataset.i || input.dataset.row) + 1;
                    const j = parseInt(input.dataset.j || input.dataset.col) + 1;
                    const crit = input.dataset.crit || 'Tiêu chí';
                    document.getElementById('error').textContent = `Giá trị ${value} tại [${i},${j}] của ${crit} không thuộc thang Saaty (${saatyScale.join(', ')}).`;
                    document.getElementById('error').classList.remove('hidden');
                    document.getElementById('calculate').disabled = true;
                } else {
                    input.classList.remove('border-red-500');
                    updateReciprocal(input); // Cập nhật giá trị nghịch đảo ngay lập tức
                    validateAllInputs();
                    if (areAllInputsFilled() && validateAllInputs()) {
                        calculateAHP();
                    }
                }
            });
        });

        // Vẫn giữ nút tính AHP thủ công
        document.getElementById('calculate').addEventListener('click', calculateAHP);
    </script>
</body>
</html>